/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "match_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace match_service {


Player::~Player() noexcept {
}


void Player::__set_id(const int32_t val) {
  this->id = val;
}

void Player::__set_username(const std::string& val) {
  this->username = val;
}

void Player::__set_photo(const std::string& val) {
  this->photo = val;
}

void Player::__set_rating(const int32_t val) {
  this->rating = val;
}

void Player::__set_channel_name(const std::string& val) {
  this->channel_name = val;
}

void Player::__set_operate(const int32_t val) {
  this->operate = val;
}

void Player::__set_bot_id(const int32_t val) {
  this->bot_id = val;
}
std::ostream& operator<<(std::ostream& out, const Player& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Player::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->photo);
          this->__isset.photo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rating);
          this->__isset.rating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channel_name);
          this->__isset.channel_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operate);
          this->__isset.operate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bot_id);
          this->__isset.bot_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Player::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Player");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("photo", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->photo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rating", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->rating);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->channel_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("operate", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->operate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bot_id", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->bot_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Player &a, Player &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.username, b.username);
  swap(a.photo, b.photo);
  swap(a.rating, b.rating);
  swap(a.channel_name, b.channel_name);
  swap(a.operate, b.operate);
  swap(a.bot_id, b.bot_id);
  swap(a.__isset, b.__isset);
}

Player::Player(const Player& other0) {
  id = other0.id;
  username = other0.username;
  photo = other0.photo;
  rating = other0.rating;
  channel_name = other0.channel_name;
  operate = other0.operate;
  bot_id = other0.bot_id;
  __isset = other0.__isset;
}
Player& Player::operator=(const Player& other1) {
  id = other1.id;
  username = other1.username;
  photo = other1.photo;
  rating = other1.rating;
  channel_name = other1.channel_name;
  operate = other1.operate;
  bot_id = other1.bot_id;
  __isset = other1.__isset;
  return *this;
}
void Player::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Player(";
  out << "id=" << to_string(id);
  out << ", " << "username=" << to_string(username);
  out << ", " << "photo=" << to_string(photo);
  out << ", " << "rating=" << to_string(rating);
  out << ", " << "channel_name=" << to_string(channel_name);
  out << ", " << "operate=" << to_string(operate);
  out << ", " << "bot_id=" << to_string(bot_id);
  out << ")";
}

} // namespace
