/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef match_TYPES_H
#define match_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace match_service {

class Player;

typedef struct _Player__isset {
  _Player__isset() : id(false), username(false), photo(false), rating(false), channel_name(false), operate(false), bot_id(false), game_id(false) {}
  bool id :1;
  bool username :1;
  bool photo :1;
  bool rating :1;
  bool channel_name :1;
  bool operate :1;
  bool bot_id :1;
  bool game_id :1;
} _Player__isset;

class Player : public virtual ::apache::thrift::TBase {
 public:

  Player(const Player&);
  Player& operator=(const Player&);
  Player() noexcept
         : id(0),
           username(),
           photo(),
           rating(0),
           channel_name(),
           operate(0),
           bot_id(0),
           game_id(0) {
  }

  virtual ~Player() noexcept;
  int32_t id;
  std::string username;
  std::string photo;
  int32_t rating;
  std::string channel_name;
  int32_t operate;
  int32_t bot_id;
  int32_t game_id;

  _Player__isset __isset;

  void __set_id(const int32_t val);

  void __set_username(const std::string& val);

  void __set_photo(const std::string& val);

  void __set_rating(const int32_t val);

  void __set_channel_name(const std::string& val);

  void __set_operate(const int32_t val);

  void __set_bot_id(const int32_t val);

  void __set_game_id(const int32_t val);

  bool operator == (const Player & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(photo == rhs.photo))
      return false;
    if (!(rating == rhs.rating))
      return false;
    if (!(channel_name == rhs.channel_name))
      return false;
    if (!(operate == rhs.operate))
      return false;
    if (!(bot_id == rhs.bot_id))
      return false;
    if (!(game_id == rhs.game_id))
      return false;
    return true;
  }
  bool operator != (const Player &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Player & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Player &a, Player &b);

std::ostream& operator<<(std::ostream& out, const Player& obj);

} // namespace

#endif
