/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef code_running_TYPES_H
#define code_running_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace code_running_service {

class Bot;

typedef struct _Bot__isset {
  _Bot__isset() : userId(false), botCode(false), input(false), language(false), room_name(false) {}
  bool userId :1;
  bool botCode :1;
  bool input :1;
  bool language :1;
  bool room_name :1;
} _Bot__isset;

class Bot : public virtual ::apache::thrift::TBase {
 public:

  Bot(const Bot&);
  Bot& operator=(const Bot&);
  Bot() noexcept
      : userId(0),
        botCode(),
        input(),
        language(),
        room_name() {
  }

  virtual ~Bot() noexcept;
  int32_t userId;
  std::string botCode;
  std::string input;
  std::string language;
  std::string room_name;

  _Bot__isset __isset;

  void __set_userId(const int32_t val);

  void __set_botCode(const std::string& val);

  void __set_input(const std::string& val);

  void __set_language(const std::string& val);

  void __set_room_name(const std::string& val);

  bool operator == (const Bot & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(botCode == rhs.botCode))
      return false;
    if (!(input == rhs.input))
      return false;
    if (!(language == rhs.language))
      return false;
    if (!(room_name == rhs.room_name))
      return false;
    return true;
  }
  bool operator != (const Bot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Bot &a, Bot &b);

std::ostream& operator<<(std::ostream& out, const Bot& obj);

} // namespace

#endif
