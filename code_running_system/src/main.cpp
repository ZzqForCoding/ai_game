// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "code_running_server/CodeRunning.h"
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/ThreadFactory.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/TToString.h>
#include <thrift/transport/TBufferTransports.h>

#include <iostream>
#include <cstdlib>
#include "thread"
#include "mutex"
#include "condition_variable"
#include "queue"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::code_running_service;

using namespace std;

struct Task {
    Bot bot;
    string type;
};

struct MessageQueue {
    queue<Task> q;
    mutex m;
    condition_variable cv;
} message_queue;

class Pool {
    private:
        vector<Bot> bots;

    public:
        void add(Bot bot) {
            bots.push_back(bot);
        }

        void run() {
            while(bots.size() > 1) {
                auto bot = bots[0];
                bots.erase(bots.begin());

                system("");
            }
        }

        void save_result() {

        }
} pool;

class CodeRunningHandler : virtual public CodeRunningIf {
    public:
        CodeRunningHandler() {
            // Your initialization goes here
        }

        int32_t add_bot_code(const Bot& bot, const std::string& info) {
            // Your implementation goes here
            printf("add_bot_code\n");
            unique_lock<mutex> lock1(message_queue.m);
            message_queue.q.push({bot, "add"});
            message_queue.cv.notify_all();
            return 0;
        }

};

class CodeRunningCloneFactory : virtual public CodeRunningIfFactory {
    public:
        ~CodeRunningCloneFactory() override = default;
        CodeRunningIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override
        {
            std::shared_ptr<TSocket> sock = std::dynamic_pointer_cast<TSocket>(connInfo.transport);
            /*cout << "Incoming connection\n";
              cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
              cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
              cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
              cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";*/
            return new CodeRunningHandler;
        }
        void releaseHandler(CodeRunningIf* handler) override {
            delete handler;
        }
};

void consume_task() {
    while(true) {
        unique_lock<mutex> lock1(message_queue.m);
        if(message_queue.q.empty()) {
            lock1.unlock();
            message_queue.cv.wait(lock1);
        } else {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lock1.unlock();
            if(task.type == "add") {
                pool.add(task.bot);
            }
            pool.run();
        }
    }
}

int main(int argc, char **argv) {
    TThreadedServer server(
            std::make_shared<CodeRunningProcessorFactory>(std::make_shared<CodeRunningCloneFactory>()),
            std::make_shared<TServerSocket>(9092), //port
            std::make_shared<TBufferedTransportFactory>(),
            std::make_shared<TBinaryProtocolFactory>());

    printf("Starting BotRunning Server...\n");

    thread code_running_thread(consume_task);

    server.serve();
    return 0;
}

